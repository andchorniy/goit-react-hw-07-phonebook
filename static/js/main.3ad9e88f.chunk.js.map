{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","redux/filter/filter-action.js","redux/filter/filter-reducer.js","redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","changeFilter","createAction","filterReducer","createReducer","state","payload","fetchContactRequest","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","itemReducer","_","filter","contact","id","contactsReducer","combineReducers","items","contactPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contacts","persistReducer","devTools","process","axios","defaults","baseURL","INITIAL_STATE","name","number","ContactForm","handleInputChange","e","currentTarget","value","setState","addContact","preventDefault","props","find","item","alert","onSubmit","this","className","style","form","label","input","type","pattern","title","required","onChange","btn","Component","connect","dispatch","dipatch","post","then","data","catch","error","deleteHandler","delete","onClick","getContacts","getFilter","getFilteredContact","createSelector","contactsList","query","toLowerCase","includes","ContactList","list","map","selectors","get","selector","handleChange","target","trim","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ad9e88f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__zhlIL\",\"item\":\"ContactList_item__3iGPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__127U7\",\"input\":\"Filter_input__3b-BL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Contact_btn__2uBd8\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nconst changeFilter = createAction(\"phonebook/changeFilter\");\r\n\r\nexport default changeFilter;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport changeFilter from \"./filter-action\";\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\r\n  \"phonebook/FetchContactRequest\"\r\n);\r\nexport const fetchContactSuccess = createAction(\r\n  \"phonebook/FetchContactSuccess\"\r\n);\r\nexport const fetchContactError = createAction(\"phonebook/FetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"phonebook/AddContactRequest\");\r\nexport const addContactSuccess = createAction(\"phonebook/AddContactSuccess\");\r\nexport const addContactError = createAction(\"phonebook/AddContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"phonebook/DeleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"phonebook/DeleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"phonebook/DeleteContactError\");\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport filterReducer from \"../filter/filter-reducer\";\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n} from \"./contacts-action\";\r\n\r\nconst itemReducer = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== +payload),\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\nconst contactPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\nconst middleware = getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactPersistConfig, contactsReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n  middleware,\r\n});\r\n// export const persistor = persistStore(store);\r\n","import axios from \"axios\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./contacts-action\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nexport const addContact = (value) => (dipatch) => {\r\n  const { name, number } = value;\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dipatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => {\r\n      dipatch(addContactSuccess(data));\r\n    })\r\n    .catch((error) => {\r\n      dipatch(addContactError(error));\r\n    });\r\n};\r\nexport const deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(deleteContactSuccess(id));\r\n    })\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\nexport const fetchContacts = () => (dipatch) => {\r\n  dipatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dipatch(fetchContactSuccess(data)))\r\n    .catch((error) => dipatch(fetchContactError(error)));\r\n};\r\n","import { Component } from \"react\";\r\nimport style from './ContactForm.module.css'\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/contacts-operations\";\r\n\r\nconst INITIAL_STATE ={\r\n    name: '',\r\n    number: '',\r\n}\r\n\r\nclass ContactForm extends Component   {\r\n    state = {\r\n        ...INITIAL_STATE\r\n    }\r\n    handleInputChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    };\r\n    addContact = (e) => {\r\n        e.preventDefault();\r\n        if(this.props.contacts.items.find(item=> item.name === this.state.name)){\r\n           alert(`${this.state.name} is already in contacts `)\r\n           return\r\n        }\r\n          this.props.onSubmit(this.state)\r\n          this.setState({\r\n            ...INITIAL_STATE\r\n        })\r\n      }\r\n    \r\n    render(){\r\n        const {name, number} = this.state\r\n        return (\r\n\r\n                <form onSubmit={this.addContact} className={style.form} >\r\n                    <label  className={style.label}>\r\n                        Name\r\n                        <input\r\n                        className={style.input}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        onChange={this.handleInputChange}\r\n                        />\r\n                    </label>\r\n                    <label className={style.label}>\r\n                        Number\r\n                        <input\r\n                        className={style.input}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={this.handleInputChange}\r\n                        />\r\n\r\n                    </label>\r\n                    <button type=\"submit\" className={style.btn}>Add contact</button>\r\n                </form>\r\n        \r\n        )}\r\n    \r\n};\r\nconst mapStateToProps = state => state\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (value)=> {\r\n         return dispatch(addContact(value))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import\tstyle from './Contact.module.css'\r\nimport { connect } from \"react-redux\";\r\nimport  {deleteContact}  from \"../../redux/contacts/contacts-operations\";\r\n\r\nconst Contact = ({name, number, id, deleteHandler}) => {\r\n    return (\r\n        <>\r\n            {name} {number}\r\n            <button className={style.btn} onClick={deleteHandler} id={id}>Delete</button>\r\n        </>\r\n    );\r\n};\r\nconst  mapDispatchToProps = dispatch => ({\r\n    deleteHandler: (e)=> dispatch(deleteContact(e.currentTarget.id))\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps )(Contact);","import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getFilteredContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (contactsList, query) => {\r\n    return contactsList.filter(({ name }) =>\r\n      name.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  }\r\n);\r\n\r\nexport default { getContacts, getFilter, getFilteredContact };\r\n","import PropTypes from 'prop-types';\r\nimport style from './ContactList.module.css'\r\nimport { connect } from \"react-redux\";\r\nimport Contact from '../Contact'\r\nimport { Component } from 'react';\r\nimport {fetchContacts} from '../../redux/contacts/contacts-operations'\r\nimport selectors  from '../../redux/contacts/contacts-selectors'\r\nclass ContactList extends Component  {\r\n    componentDidMount(){\r\n        this.props.getContacts()\r\n    }\r\n    render(){\r\n\r\n        return (\r\n                <ul className={style.list}>\r\n                {this.props.contacts.map((contact)=>{\r\n                    return <li className={style.item} key={contact.id}>\r\n                        <Contact name={contact.name} number={contact.number} id={contact.id} />\r\n                        </li>\r\n                })}\r\n                </ul>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: selectors.getFilteredContact(state) \r\n  });\r\nconst mapDispatchToProps = dispatch =>({\r\n    getContacts: ()=> dispatch(fetchContacts())\r\n})\r\n\r\nContactList.propTypes={\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired\r\n    })).isRequired,\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactList);","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport style from './Filter.module.css'\r\nimport changeFilter from '../../redux/filter/filter-action'\r\nimport selector from '../../redux/contacts/contacts-selectors'\r\nconst Filter = ({filter, handleChange}) => {\r\n    return (\r\n        <div>\r\n            <label className={style.label}>\r\n                Find contacts by name\r\n                <input className={style.input} type=\"text\" name=\"filter\" value={filter} onChange={handleChange}/>\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps=(state)=>({\r\n    filter: selector.getFilter(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    handleChange: (e)=> dispatch(changeFilter(e.target.value.trim()))\r\n})\r\nFilter.propTypes={\r\n    handleChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import \"./App.css\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\nimport {} from \"./redux/contacts/contacts-action\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={<h1>Loaging...</h1>} persistor={persistor}> */}\r\n        <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3U0_3\",\"label\":\"ContactForm_label__37_FR\",\"input\":\"ContactForm_input__2J9KK\",\"btn\":\"ContactForm_btn__10gRk\"};"],"sourceRoot":""}